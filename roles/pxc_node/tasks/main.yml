---
# Phase 1: Host initialization (optional toggles)
- name: Set system hostname to inventory_hostname (Phase 1)
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"

- name: Ensure PXC cluster hosts are present in /etc/hosts (Phase 1)
  ansible.builtin.blockinfile:
    path: /etc/hosts
    marker: "# {mark} PXC CLUSTER HOSTS"
    block: |
      {% for host in (groups['pxc_nodes'] + groups.get('pxc_arbiter', [])) %}
      {{ hostvars[host].wsrep_node_address }} {{ host }}
      {% endfor %}
    owner: root
    group: root
    mode: '0644'
- name: Disable swap immediately (Phase 1)
  ansible.builtin.command: swapoff -a
  changed_when: false

- name: Permanently disable swap in /etc/fstab (Phase 1)
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^(.*\s+swap\s+.*)$'
    replace: '# \1'


# Phase 2: Repos and packages only (no configuration, no service start)

# --- PRE-CLEAN ---
- name: Check if Percona/PXC already installed
  ansible.builtin.shell: >
    dpkg -s percona-xtradb-cluster percona-server-server 2>/dev/null |
    awk '/^Status:.*installed/ {print "yes"; exit}'
  register: percona_present
  changed_when: false
  failed_when: false

- block:
    - name: Detect conflicting MySQL/MariaDB packages (Phase 2 - pre-clean)
      ansible.builtin.shell: >
        dpkg -l | awk '/^(ii|rc)\s+(mysql|mariadb)/ && $2 !~ /^percona/ {print $2}'
      register: mysql_conflicts
      changed_when: false

    - name: Purge conflicting packages (Phase 2 - pre-clean)
      ansible.builtin.apt:
        name: "{{ mysql_conflicts.stdout_lines }}"
        state: absent
        purge: true
      when: mysql_conflicts.stdout_lines | length > 0

    - name: Autoremove & purge leftovers (Phase 2 - pre-clean)
      ansible.builtin.apt:
        autoremove: yes
        purge: yes

    - name: Remove alternative my.cnf links (Phase 2 - pre-clean)
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/alternatives/my.cnf
        - /etc/alternatives/mysql.cnf

    - name: Remove legacy my.cnf under /etc/mysql (Phase 2 - pre-clean)
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/mysql/my.cnf
        - /etc/mysql/mysql.cnf

    - name: Force-remove AppArmor profile for mysqld (Phase 2 - pre-clean)
      ansible.builtin.file:
        path: /etc/apparmor.d/usr.sbin.mysqld
        state: absent
      register: aa_profile

    - name: Reload AppArmor if profile was removed
      ansible.builtin.systemd:
        name: apparmor
        state: reloaded
      when: aa_profile is changed
      failed_when: false

    - name: Assert mysqld AppArmor profile is absent
      ansible.builtin.stat:
        path: /etc/apparmor.d/usr.sbin.mysqld
      register: aa_profile_after

    - name: Verify mysqld AppArmor profile is absent
      ansible.builtin.assert:
        that:
          - not aa_profile_after.stat.exists
        fail_msg: "AppArmor mysqld profile still present at /etc/apparmor.d/usr.sbin.mysqld"
        success_msg: "AppArmor mysqld profile is absent"
  when: percona_present.stdout | trim != "yes"
# --- END PRE-CLEAN ---
- name: Install prerequisites (Phase 2)
  ansible.builtin.apt:
    name:
      - wget
      - gnupg2
      - lsb-release
      - curl
    state: present
    update_cache: yes

- name: Download percona-release package (Phase 2)
  ansible.builtin.get_url:
    url: "https://repo.percona.com/apt/percona-release_latest.generic_all.deb"
    dest: "/tmp/percona-release_latest.generic_all.deb"
    mode: "0644"

- name: Install percona-release package (Phase 2)
  ansible.builtin.apt:
    deb: "/tmp/percona-release_latest.generic_all.deb"
    update_cache: yes

- name: Enable PXC 8.0 repository (Phase 2)
  ansible.builtin.command: "percona-release setup pxc80"
  changed_when: false

- name: Install PXC packages only (Phase 2)
  ansible.builtin.apt:
    name:
      - percona-xtradb-cluster
      - percona-xtrabackup-80
      - percona-toolkit
    state: present
    update_cache: yes

# Installation complete.  Configuration and service management tasks follow.

# -----------------------------------------------------------------------------
# Phase 3: Configuration deployment and service management
#
# Once the Percona packages are installed, configure each node with a minimal
# but productionâ€‘ready my.cnf.  The configuration template closely follows the
# example provided in the deployment guide.  It populates the node specific
# settings (wsrep_node_name, wsrep_node_address, server_id) from the inventory
# and derives the cluster address from the full list of PXC data nodes plus
# the arbiter host, if present.  No extra parameters are added beyond the
# reference file.

- name: Ensure data and log directories exist (Phase 3)
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: mysql
    group: mysql
    mode: '0750'
  loop:
    - /data
    - /data/mysql
    - /data/logs
    - /data/logs/mysql

- name: Deploy mysqld configuration (Phase 3)
  ansible.builtin.template:
    src: mysqld.cnf.j2
    dest: /etc/mysql/mysql.conf.d/mysqld.cnf
    owner: root
    group: root
    mode: '0644'

- name: Start bootstrap service on first node (Phase 3)
  ansible.builtin.service:
    name: "mysql@bootstrap.service"
    state: started
  when: (bootstrap_first_node | default(false))

- name: Start MySQL service on remaining nodes (Phase 3)
  ansible.builtin.service:
    name: mysql
    state: started
    enabled: yes
  when: not (bootstrap_first_node | default(false))


